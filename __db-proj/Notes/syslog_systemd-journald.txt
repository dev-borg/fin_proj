Q. Is the link at /dev/log is more a process (daemon server) than a file?

ChatGPT
Yes, that's correct. The symbolic link /dev/log is not a traditional file but rather a symbolic link pointing to a socket or an interface managed by the systemd-journald service. In Unix-like systems, including those using systemd, devices under /dev typically represent physical or virtual devices, but in this case, /dev/log is a special link that allows programs to send log messages to the system logger (syslog) for further processing.

Hereâ€™s a breakdown:

Symbolic Link: /dev/log is a symbolic link created for compatibility and convenience. It points to another location that handles log messages.

Target Location: On systems using systemd-journald, /dev/log typically points to /run/systemd/journal/dev-log=. This is not a regular file but rather an interface or socket managed by systemd-journald.

Purpose: Programs, including your Python script using logging.handlers.SysLogHandler, send log messages to /dev/log. These messages are then processed and managed by systemd-journald.

Daemon Service: systemd-journald is a system service (daemon) responsible for collecting, storing, and managing log messages. It operates independently and provides centralized logging capabilities for the system.

Accessing Logs: You access logs managed by systemd-journald using commands like journalctl. These commands interact with the service to retrieve and display logs based on various filters and criteria.

In summary, /dev/log is more than just a symbolic link to a file; it represents an interface or socket through which log messages are passed to systemd-journald, a daemon service that manages and stores system logs. Understanding this setup helps in effectively managing and troubleshooting log messages from your applications running on a system using systemd.

------------------------------------------------------------------------------------------------------

Addendum:

Logging Levels:

Logging in Python follows a hierarchy of severity levels, which are (in increasing order of severity): DEBUG, INFO, WARNING, ERROR, and CRITICAL.
When you set the logging level using logger.setLevel(), the logger will handle messages that are at or above the specified level.
Tailoring Logging Levels:

DEBUG: Detailed information, typically of interest only when diagnosing problems.
INFO: Confirmation that things are working as expected.
WARNING: Indication that something unexpected happened or indicative of some problem in the near future (e.g., disk space low).
ERROR: Due to a more serious problem, the software has not been able to perform some function.
CRITICAL: A serious error, indicating that the program itself may be unable to continue running.